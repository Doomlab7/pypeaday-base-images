{"config": {"glob_patterns": ["pages/**/*.md"], "hooks": ["markata.plugins.publish_source", "markata.plugins.prevnext", "default"], "disabled_hooks": ["markata.plugins.seo"], "markdown_extensions": [], "default_cache_expire": 1209600, "output_dir": "markout", "assets_dir": "static", "version": 0, "edit": false, "url": "https://pypeaday.github.io/pypeaday-base-images", "description": "Docs for my Base Images Repo, also an example of CI and Dockerizing a website", "title": "Docs for Pypeaday's Base Images", "rss_description": "Docs for my Base Images Repo, also an example of CI and Dockerizing a website", "author_name": "Pypeaday", "author_email": "base-images@pype.dev", "site_name": "Pypeaday Base Images Docs", "theme_color": "#322D39", "background_color": "#B73CF6", "start_url": "pypeaday-base-images", "short_name": "Docs", "display": "minimal-ui", "icon": "icon.png", "lang": "en", "nav": {"Home": "/", "All Posts": "/archive"}, "prevnext": {"strategy": "first", "prevnext_color_text": "white", "prevnext_color_text_light": "black", "prevnext_color_angle": "white", "prevnext_color_angle_light": "black"}, "auto_description": {"description": {"len": 160}, "long_description": {"len": 250}, "super_description": {"len": 500}, "cache_expire": 1209600, "config_key": "auto_description"}, "auto_publish": {"filters": {"til": "templateKey=='til' and date<=today and post.get('published', False)== 'True'"}}, "head": {"text": "<title>{{ title|e }}</title>", "meta": [{"name": "twitter:title", "content": "{{ title|e }}"}, {"name": "og:title", "content": "{{ title|e }}"}, {"name": "description", "content": "{{ description|e }}"}, {"name": "og:description", "content": "{{ description|e }}"}, {"name": "twitter:description", "content": "{{ description|e }}"}, {"name": "og:type", "content": "article"}, {"name": "og:url", "content": "{{ config.url }}/{{ slug }}/"}, {"name": "og:image", "content": "{{ config.url }}/{{ slug }}.jpg"}, {"name": "og:image:width", "content": 1200}, {"name": "og:image:height", "content": 600}, {"name": "twitter:creator", "content": "@pypeaday"}, {"name": "twitter:card", "content": "summary_large_image"}, {"name": "og:author", "content": "Pypeaday"}, {"name": "og:site_name", "content": "Pypeaday Base Image Docs"}, {"name": "og:author_email", "content": "base-images@pype.dev"}, {"name": "generator", "content": "markata {{ __version__ }}"}, {"name": "theme-color", "content": "#322D39"}], "link": [{"href": "{{ config.url }}/{{ slug + '/' if slug != 'index' else '' }}", "rel": "canonical"}]}, "feeds": {"archive": {"filter": "date<=today and post.get('published', False)", "sort": "date", "reverse": "True", "template": "/home/runner/.local/share/hatch/env/virtual/markata-docs/3zE9tRg4/markata-docs/lib/python3.10/site-packages/markata/plugins/default_post_template.html"}, "all": {"filter": "True", "sort": "date", "reverse": "True", "template": "/home/runner/.local/share/hatch/env/virtual/markata-docs/3zE9tRg4/markata-docs/lib/python3.10/site-packages/markata/plugins/default_post_template.html"}, "published": {"filter": "date<=today and post.get('published', False)", "sort": "date", "reverse": "True", "template": "/home/runner/.local/share/hatch/env/virtual/markata-docs/3zE9tRg4/markata-docs/lib/python3.10/site-packages/markata/plugins/default_post_template.html"}, "draft": {"filter": "date>today or not post.get('published', False)", "sort": "date", "reverse": "True", "template": "/home/runner/.local/share/hatch/env/virtual/markata-docs/3zE9tRg4/markata-docs/lib/python3.10/site-packages/markata/plugins/default_post_template.html"}}}, "articles": [{"cover": "", "title": "Whoops that page was not found", "tags": [], "status": "draft", "templateKey": "", "path": "pages/404.md", "description": "404, looks like we can't find the page you are looking for", "content": "404, looks like we can't find the page you are looking for.  Try one of these\npages.\n\n<ul>\n\n    <li><a href=\"index\">Markata Blog Starter</a></li>\n\n    <li><a href=\"hello-world\">Hello World</a></li>\n\n</ul>\n<div class='prevnext'>\n\n    <style type='text/css'>\n\n    :root {\n      --prevnext-color-text: #eefbfe;\n      --prevnext-color-angle: #e1bd00c9;\n      --prevnext-subtitle-brightness: 3;\n    }\n    [data-theme=\"light\"] {\n      --prevnext-color-text: #1f2022;\n      --prevnext-color-angle: #ffeb00;\n      --prevnext-subtitle-brightness: 3;\n    }\n    [data-theme=\"dark\"] {\n      --prevnext-color-text: #eefbfe;\n      --prevnext-color-angle: #e1bd00c9;\n      --prevnext-subtitle-brightness: 3;\n    }\n    .prevnext {\n      display: flex;\n      flex-direction: row;\n      justify-content: space-around;\n      align-items: flex-start;\n    }\n    .prevnext a {\n      display: flex;\n      align-items: center;\n      width: 100%;\n      text-decoration: none;\n    }\n    a.next {\n      justify-content: flex-end;\n    }\n    .prevnext a:hover {\n      background: #00000006;\n    }\n    .prevnext-subtitle {\n      color: var(--prevnext-color-text);\n      filter: brightness(var(--prevnext-subtitle-brightness));\n      font-size: .8rem;\n    }\n    .prevnext-title {\n      color: var(--prevnext-color-text);\n      font-size: 1rem;\n    }\n    .prevnext-text {\n      max-width: 30vw;\n    }\n    </style>\n    \n    <a class='prev' href='/'>\n    \n\n        <svg width=\"50px\" height=\"50px\" viewbox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n            <path d=\"M13.5 8.25L9.75 12L13.5 15.75\" stroke=\"var(--prevnext-color-angle)\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\"> </path>\n        </svg>\n        <div class='prevnext-text'>\n            <p class='prevnext-subtitle'>prev</p>\n            <p class='prevnext-title'>Markata Blog Starter</p>\n        </div>\n    </a>\n    \n    <a class='next' href='/hello-world'>\n    \n        <div class='prevnext-text'>\n            <p class='prevnext-subtitle'>next</p>\n            <p class='prevnext-title'>Hello World</p>\n        </div>\n        <svg width=\"50px\" height=\"50px\" viewbox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n            <path d=\"M10.5 15.75L14.25 12L10.5 8.25\" stroke=\"var(--prevnext-color-angle)\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path>\n        </svg>\n    </a>\n  </div>", "date": "2022-09-01", "published": false, "output_html": "markout/404.html", "edit_link": "https://github.com/edit/main/pages/404.md", "today": "2022-12-28", "now": "2022-12-28 01:06:35.987321", "datetime": "2022-09-01 00:00:00+00:00", "slug": "404", "long_description": "404, looks like we can", "super_description": "404, looks like we can", "jinja": false, "prevnext": "PrevNext(prev=<frontmatter.Post object at 0x7fc8eadacfa0>, next=<frontmatter.Post object at 0x7fc8eadac460>)"}, {"cover": "", "title": "Hello World", "tags": ["quick", "home"], "status": "draft", "templateKey": "", "path": "pages/hello-world.md", "description": "The smallest example is my This is simply a lightweight Docker image that I wanted to work through an example of using multiple stages for a build I am using  T", "content": "The smallest example is my\n[hello-world](https://github.com/pypeaday/pypeaday-base-images/tree/main/hello-world)\nand associated\n[build](https://github.com/pypeaday/pypeaday-base-images/blob/main/.github/workflows/ci-hello-world.yml)\n\nThis is simply a lightweight Docker image that's built in my CI pipeline and\ndeployed to my DockerHub for now.\n\n# Multi-Stage CI\n\nI wanted to work through an example of using multiple stages for a build\npipeline (note for an example this small this is ridiculous)\n\n## Lint\n\nI am using [pre-commit]() basically whenever I can. In this repo I will use it\nheavily but also do some linting explicitly just for practice. In general I'd\nsay it's best to consoloidate tools as much as makes sense - and pre-commit\nmakes sense for wrapping a bunch of linting (and testing) into one GH Action,\nor one more general task in a different CI system\n\nThe main pre-commit hook that matters here is\n[hadolint](https://github.com/hadolint/hadolint) which I'm playing with as a\nDockerfile linter\n\n## Build\n\nThe `build` job is where we build the Docker image. This is a different\njob/stage so that it can be running at the same time as the lint checks, rather\nthan one after the other.\n\nWe could use bash to build and tag our Docker images, but GH Actions has a nice option for us called `docker/build-push-action@v3`\n\nI want to use best-practice tools and for GH Actions I think this makes good\nsense, otherwise we'd have to write a little bash - examples below\n\n```yaml\n      - name: Build and export\n        uses: docker/build-push-action@v3\n        with:\n          context: ./hello-world\n          file: ./hello-world/alpine.Dockerfile\n          build-args: |\n            BASE_VERSION=${{env.BASE_VERSION}}\n          tags: |\n            hello-world-alpine-latest\n          outputs: type=docker,dest=/tmp/myimage.tar\n```\n\nNote that I specify `context` here because my base-images repo is kind of a\nmeta-repo with just sub-directories that are not git-submodules. Therefore in\npractice this might/probably be unnecessary.\n\nAlso note, and this is just my playing around, that I output the docker image\nto a `tar` file which is available in cache to all the jobs in a workflow. I\nthink more generally this is just serializing an artifact somewhere that your\nrunner/task manager has access to\n\nThis is useful for:\n  1. breaking up the stages of `build` and `push` because otherwise the GH Action wants to just push right to Docker\n  2. sharing the docker image with other stages if that becomes relevant... I have ideas\n\n## Push\n\nOur Push job starts by setting up the same Docker build environment that the\nDocker job uses (canned GH Action - probably similar options in other CI\nsystems) then logging into DockerHub.\n\nWe don't re-build the image - instead we grab the `tar` file from the cache and\nmake sure it's good to go before manually tagging the image in a relevant way -\nlike with a version or branch name\n\nPushing then happens based on the branch - this is highly subject to change and\nbe different depending on any team's CI/CD workflow\n<div class='prevnext'>\n\n    <style type='text/css'>\n\n    :root {\n      --prevnext-color-text: #eefbfe;\n      --prevnext-color-angle: #e1bd00c9;\n      --prevnext-subtitle-brightness: 3;\n    }\n    [data-theme=\"light\"] {\n      --prevnext-color-text: #1f2022;\n      --prevnext-color-angle: #ffeb00;\n      --prevnext-subtitle-brightness: 3;\n    }\n    [data-theme=\"dark\"] {\n      --prevnext-color-text: #eefbfe;\n      --prevnext-color-angle: #e1bd00c9;\n      --prevnext-subtitle-brightness: 3;\n    }\n    .prevnext {\n      display: flex;\n      flex-direction: row;\n      justify-content: space-around;\n      align-items: flex-start;\n    }\n    .prevnext a {\n      display: flex;\n      align-items: center;\n      width: 100%;\n      text-decoration: none;\n    }\n    a.next {\n      justify-content: flex-end;\n    }\n    .prevnext a:hover {\n      background: #00000006;\n    }\n    .prevnext-subtitle {\n      color: var(--prevnext-color-text);\n      filter: brightness(var(--prevnext-subtitle-brightness));\n      font-size: .8rem;\n    }\n    .prevnext-title {\n      color: var(--prevnext-color-text);\n      font-size: 1rem;\n    }\n    .prevnext-text {\n      max-width: 30vw;\n    }\n    </style>\n    \n    <a class='prev' href='/404'>\n    \n\n        <svg width=\"50px\" height=\"50px\" viewbox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n            <path d=\"M13.5 8.25L9.75 12L13.5 15.75\" stroke=\"var(--prevnext-color-angle)\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\"> </path>\n        </svg>\n        <div class='prevnext-text'>\n            <p class='prevnext-subtitle'>prev</p>\n            <p class='prevnext-title'>Whoops that page was not found</p>\n        </div>\n    </a>\n    \n    <a class='next' href='/'>\n    \n        <div class='prevnext-text'>\n            <p class='prevnext-subtitle'>next</p>\n            <p class='prevnext-title'>Markata Blog Starter</p>\n        </div>\n        <svg width=\"50px\" height=\"50px\" viewbox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n            <path d=\"M10.5 15.75L14.25 12L10.5 8.25\" stroke=\"var(--prevnext-color-angle)\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path>\n        </svg>\n    </a>\n  </div>", "date": "2022-12-04", "published": true, "edit_link": "https://github.com/edit/main/pages/hello-world.md", "today": "2022-12-28", "now": "2022-12-28 01:06:35.987336", "datetime": "2022-12-04 00:00:00+00:00", "slug": "hello-world", "output_html": "markout/hello-world/index.html", "long_description": "The smallest example is my This is simply a lightweight Docker image that I wanted to work through an example of using multiple stages for a build I am using  The main pre-commit hook that matters here is The  We could use bash to build and tag our D", "super_description": "The smallest example is my This is simply a lightweight Docker image that I wanted to work through an example of using multiple stages for a build I am using  The main pre-commit hook that matters here is The  We could use bash to build and tag our Docker images, but GH Actions has a nice option for us called  I want to use best-practice tools and for GH Actions I think this makes good Note that I specify  Also note, and this is just my playing around, that I output the docker image This is usef", "prevnext": "PrevNext(prev=<frontmatter.Post object at 0x7fc8eadacb20>, next=<frontmatter.Post object at 0x7fc8eadacfa0>)"}, {"cover": "", "title": "Markata Blog Starter", "tags": ["home", "meta"], "status": "draft", "templateKey": "", "path": "pages/index.md", "description": "Welcome to Pypeaday Base Image docs {% for post in markata.map(", "content": "Welcome to Pypeaday Base Image docs\n\n## Some helpful pages\n\n\n!!! note \"[Hello World](hello-world)\"\n    The smallest example is my This is simply a lightweight Docker image that I wanted to work through an example of using multiple stages for a build I am using  T...\n\n<div class='prevnext'>\n\n    <style type='text/css'>\n\n    :root {\n      --prevnext-color-text: #eefbfe;\n      --prevnext-color-angle: #e1bd00c9;\n      --prevnext-subtitle-brightness: 3;\n    }\n    [data-theme=\"light\"] {\n      --prevnext-color-text: #1f2022;\n      --prevnext-color-angle: #ffeb00;\n      --prevnext-subtitle-brightness: 3;\n    }\n    [data-theme=\"dark\"] {\n      --prevnext-color-text: #eefbfe;\n      --prevnext-color-angle: #e1bd00c9;\n      --prevnext-subtitle-brightness: 3;\n    }\n    .prevnext {\n      display: flex;\n      flex-direction: row;\n      justify-content: space-around;\n      align-items: flex-start;\n    }\n    .prevnext a {\n      display: flex;\n      align-items: center;\n      width: 100%;\n      text-decoration: none;\n    }\n    a.next {\n      justify-content: flex-end;\n    }\n    .prevnext a:hover {\n      background: #00000006;\n    }\n    .prevnext-subtitle {\n      color: var(--prevnext-color-text);\n      filter: brightness(var(--prevnext-subtitle-brightness));\n      font-size: .8rem;\n    }\n    .prevnext-title {\n      color: var(--prevnext-color-text);\n      font-size: 1rem;\n    }\n    .prevnext-text {\n      max-width: 30vw;\n    }\n    </style>\n    \n    <a class='prev' href='/hello-world'>\n    \n\n        <svg width=\"50px\" height=\"50px\" viewbox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n            <path d=\"M13.5 8.25L9.75 12L13.5 15.75\" stroke=\"var(--prevnext-color-angle)\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\"> </path>\n        </svg>\n        <div class='prevnext-text'>\n            <p class='prevnext-subtitle'>prev</p>\n            <p class='prevnext-title'>Hello World</p>\n        </div>\n    </a>\n    \n    <a class='next' href='/hello-world'>\n    \n        <div class='prevnext-text'>\n            <p class='prevnext-subtitle'>next</p>\n            <p class='prevnext-title'>Hello World</p>\n        </div>\n        <svg width=\"50px\" height=\"50px\" viewbox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n            <path d=\"M10.5 15.75L14.25 12L10.5 8.25\" stroke=\"var(--prevnext-color-angle)\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path>\n        </svg>\n    </a>\n  </div>", "date": "2022-09-01", "published": true, "edit_link": "https://github.com/edit/main/pages/index.md", "today": "2022-12-28", "now": "2022-12-28 01:06:35.987346", "datetime": "2022-09-01 00:00:00+00:00", "slug": "index", "output_html": "markout/index.html", "long_description": "Welcome to Pypeaday Base Image docs {% for post in markata.map(", "super_description": "Welcome to Pypeaday Base Image docs {% for post in markata.map(", "jinja": false, "prevnext": "PrevNext(prev=<frontmatter.Post object at 0x7fc8eadac460>, next=<frontmatter.Post object at 0x7fc8eadac460>)"}]}